{
  "name": "amqp-dsl",
  "description": "Amqp-DSL - Fluent interface for node-amqp",
  "keywords": [
    "amqp",
    "dsl"
  ],
  "version": "1.0.6",
  "homepage": "https://github.com/FGRibreau/node-amqp-dsl",
  "repository": "",
  "dependencies": {
    "async": "0.2.6",
    "amqp": "0.1.6",
    "docco": "0.3.x",
    "coffee-script": "~1.4.0"
  },
  "devDependencies": {
    "vows": "~0.7.0",
    "grunt": "~0.3.17"
  },
  "scripts": {
    "test": "./node_modules/vows/bin/vows --spec"
  },
  "author": {
    "name": "Francois-Guillaume Ribreau",
    "email": "npm@fgribreau.com",
    "url": "http://fgribreau.com"
  },
  "main": "./index",
  "engines": {
    "node": ">= 0.4.12"
  },
  "readme": "## Fluent Interface for dealing with AMQP on NodeJS [![Build Status](https://secure.travis-ci.org/FGRibreau/node-amqp-dsl.png)](http://travis-ci.org/FGRibreau/node-amqp-dsl) ##\n\nAMQP-DSL is a [fluent interface](http://en.wikipedia.org/wiki/Fluent_interface) wrapper for [node-amqp](https://github.com/postwait/node-amqp) and help you write AMQP binding code in a clean and efficient way.\n\n## Installation\n\n    $ npm install amqp-dsl\n\n## Usage overview\n\n### Simple connection (more details: `docs/example-connection`)\n\n```coffeescript\n\namqp = require 'amqp-dsl'\n\namqp.login(\n\n  login: 'user'\n  password: 'password'\n  host: 'localhost'\n\n).connect((err, amqp) ->\n\n  if err\n    throw err\n    return\n\n  console.log 'We are connected !'\n\n)\n```\n\n### Simple example (more details: `docs/example-simple`)\n\n```coffeescript\n\nAmqpDsl = require 'amqp-dsl'\n\nAmqpDsl.login(\n  login: 'legen'\n  password: 'dary'\n)\n.on( 'close', () -> console.error \"RabbitMQ connection closed\" )\n.on( 'error', (err) -> console.error \"RabbitMQ error\", err )\n.on( 'ready', () -> console.log \"Connected to RabbitMQ\" )\n\n.queue( 'testQueue', (queue) -> console.log \"Connected to Queue\", queue.name )\n  .bind( 'stream', '#' )\n  .bind( 'stream2', 'routing.key' )\n  .subscribe( (message, header, deliveryInfo) -> )\n\n.queue( 'queue2' )\n  .bind( 'search', '#.ok' )\n\n.queue( 'queue3', passive:true )\n\n.connect( (err, amqp) ->\n\n  if err\n    throw err\n    return\n\n  # Do other stuff with `amqp` like subscribing to a queue\n\n  queue3 = amqp.queues.queue3\n\n  queue3.subscribe( ack:true, ( message, header, deliveryInfo ) ->\n    console.log \"Hey ! We got one new message !\"\n    queue3.shift()\n  )\n\n)\n```\n\nSee `examples/` and `docs/` for more information.\n\n## API\n\n### .login\n * `login( options = {} )`\n\n### .on\n * `on( event, listener )`\n\n### .exchange\n * `.exchange( name, options )`\n * `.exchange( name, callback(exchange) )`\n * `.exchange( name, options, callback(exchange) )`\n\n### .queue\n * `.queue( name, options )`\n * `.queue( name, callback(queue) )`\n * `.queue( name, options, callback(queue) )`\n\n### .queue(...).subscribe\n * `.subscribe( callback(message, header, deliveryInfo) )`\n * `.subscribe( options, callback(message, header, deliveryInfo) )`\n\n### .queue(...).bind\n * `.bind( name, routingKey )`\n\n### .connect\n * `.connect()`\n * `.connect( callback(err, amqp) )`\n * `.connect( amqp, callback(err, amqp) )`\n\nThe `amqp` argument is simply hashtable with the following properties:\n\n * queues (hashtable of `AMQP::queues`)\n * exchanges (hashtable of `AMQP::Exchange`)\n * connection (`AMQP::Connection`)\n\n\n## Documentation\n\n### Build documentation\n    $ cake doc\n\n... and browse `docs/`\n\n## Test\n\n    $ npm test\n\n## Release History\nv1.0.3 - Support for .connect()\nv1.0.2 - Critical bug fix\nv1.0.1 - .bind & .subscribe can now be called multiple times. This is the behavior that should have been in place since the beginning.\n\n## License\nCopyright (c) 2013 Francois-Guillaume Ribreau\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "amqp-dsl@1.0.6",
  "dist": {
    "shasum": "b57a1fee01ed8ec5f171c35d08226293ee3149d5"
  },
  "_from": "amqp-dsl@*",
  "_resolved": "https://registry.npmjs.org/amqp-dsl/-/amqp-dsl-1.0.6.tgz"
}
